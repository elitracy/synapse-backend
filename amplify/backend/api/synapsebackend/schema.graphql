type Lecture @model @auth(rules: [{allow: public}]) {
  id: ID!
  Transcript: String
  YouTube: String
  Users: [User] @hasMany(indexName: "byLecture", fields: ["id"])
}

type Group @model @auth(rules: [{allow: public}]) {
  id: ID!
  Name: String
  Users: [User] @manyToMany(relationName: "GroupUser")
  Outlines: [Outline] @hasMany(indexName: "byGroup", fields: ["id"])
}

type Outline @model @auth(rules: [{allow: public}]) {
  id: ID!
  Summary: String
  userID: ID! @index(name: "byUser")
  Notes: [Note] @hasMany(indexName: "byOutline", fields: ["id"])
  Lecture: Lecture @hasOne
  groupID: ID! @index(name: "byGroup")
}

type Note @model @auth(rules: [{allow: public}]) {
  id: ID!
  Content: String
  userID: ID! @index(name: "byUser")
  outlineID: ID! @index(name: "byOutline")
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  Name: String
  Email: AWSEmail
  Password: String
  Notes: [Note] @hasMany(indexName: "byUser", fields: ["id"])
  Outlines: [Outline] @hasMany(indexName: "byUser", fields: ["id"])
  lectureID: ID! @index(name: "byLecture")
  groups: [Group] @manyToMany(relationName: "GroupUser"),
  foo: String @function(name: "foo")
}
